#!/usr/bin/env python
"""
This is the utility to compute the density of a wavefunction
in a basis of phase-space evolving Gaussian functions using
numerical (Monte-Carlo) integration.
The basis data is read from a NOMAD checkpoint file.
The definition of the internal coordinates, as well as the 
integration grid to employ is defined in an input file that
is parsed by this script.
"""
import os
import ast
import math
import sys as sys
import h5py as h5py
import ctypes as ctypes
import array as array
import numpy as np
import nomad.core.glbl as glbl
import nomad.core.checkpoint as checkpoint
import nomad.analysis.plot as plot

input_file  = ''
chkpt_file  = ''
valid_coord = ['stre', 'bend',  'tors',  '|tors|', 
               'oop',  '|oop|', 'plane', '|plane|']
valid_ops           = ['sum', 'max', '|sum|']
max_states          = 10
max_prim            = 8
max_atoms           = 8*6
time_conv           = 1./41.334
print_density_files = False

def init():
    """Initializes the nomad inputs.

    This must be separate from main so that an error which occurs
    before the input file is created will be written to stdout.
    """

    process_arguments(sys.argv)

def process_arguments(args):
    """Process command line arguments."""
    global input_file, chkpt_file 

    input_file = str(args[1])

    if '-chkpt' in sys.argv:
        chkpt_file = str(args[args.index('-chkpt')+1])
        glbl.paths['cwd']        = os.getcwd()
    else:
        chkpt_file = '' 

    return

#
def main():
    """ main driver routine """
    global input_file, chkpt_file
    global valid_coord, valid_ops
    global max_states, max_prim, max_atoms
    global print_density_files, time_conv

    input_kwords = parse_input(input_file)

    # load the appropriate library
    den_path  = os.environ['NOMAD']+'/nomad/analysis/lib_den.so'
    ld_libs   = os.environ['LD_LIBRARY_PATH']
    if not os.path.isfile(den_path):
        raise FileNotFoundError('density library not found: '+den_path)
    lib_den = ctypes.cdll.LoadLibrary(den_path)

    # reset chkpt_file variable to be consistent with the current path
    chkpt = h5py.File(chkpt_file, 'r+', libver='latest')
    checkpoint.read_keywords(chkpt)

    # change the current default checkpoint file path to the checkpoint
    # file we're operating on.
    glbl.paths['chkpt_file'] = chkpt_file

    # pass the various run time options to the propagation library
    default_step = float(glbl.properties['default_time_step'])
    tstep_method = ['nascent', 'static'].index('static')+1

    lib_den.traj_init_table(
           ctypes.byref(convert_ctypes(default_step, dtype='double')),
           ctypes.byref(convert_ctypes(tstep_method, dtype='int32')))

    # extract information about the basis
    n_wfn, n_traj, n_steps, t_times = checkpoint.retrieve_basis(chkpt)
    n_total  = sum(n_traj)
    n_states = int(glbl.properties['n_states'])
    n_crd    = len(glbl.properties['crd_widths'])
    widths   = np.array(glbl.properties['crd_widths'], dtype=float)
    masses   = np.array(glbl.properties['crd_masses'], dtype=float)
    x_ref    = np.array(glbl.properties['init_coords'][0,0],dtype=float)
    p_ref    = np.array(glbl.properties['init_coords'][0,1],dtype=float)

    # initialize the trajectory table
    lib_den.traj_create_table(
           ctypes.byref(convert_ctypes(n_wfn,   dtype='int32')),
           ctypes.byref(convert_ctypes(n_total, dtype='int32')),
           ctypes.byref(convert_ctypes(n_states,dtype='int32')),
           ctypes.byref(convert_ctypes(n_crd,   dtype='int32')),
           ctypes.byref(convert_ctypes(widths,  dtype='double')),
           ctypes.byref(convert_ctypes(masses,  dtype='double')),
           ctypes.byref(convert_ctypes(x_ref,   dtype='double')),
           ctypes.byref(convert_ctypes(p_ref,   dtype='double')))

    # initialize the density module by processing input keywords
    den_kwords = parse_input(input_file)
    t_init  = float(den_kwords['tinit'])
    t_final = float(den_kwords['tfinal'])
    t_step  = float(den_kwords['tstep'])

    random_seed= 1
    n_intl     = len(den_kwords['coords'])
    state_list = np.full( (max_states),-1,  dtype=int)
    coord_list = np.zeros(max_prim*n_intl,  dtype=int)
    cf_list    = np.zeros(max_prim*n_intl,  dtype=float)
    atm_list   = np.zeros(max_atoms*n_intl, dtype=int)
    op_list    = np.zeros(n_intl,   dtype=int)
    bnds       = np.zeros(2*n_intl, dtype=float)
    npts       = np.zeros(n_intl,   dtype=int)
 
    if den_kwords['normalize']:
        for i_crd in range(n_intl):
            cf = np.array(den_kwords['coefs'][i_crd], dtype=float)
            cf *= 1./math.sqrt(np.dot(cf, cf))
            den_kwords['coefs'][i_crd] = cf.tolist()
 
    for state in range(len(den_kwords['states'])):
        state_list[state] = int(den_kwords['states'][state])
    for crd in range(n_intl):
        npts[crd]     = float(den_kwords['npts'][crd])
        op_list[crd]  = int(valid_ops.index(den_kwords['op'][crd])+1)
        bnds[2*crd]   = float(den_kwords['bounds'][crd][0])
        bnds[2*crd+1] = float(den_kwords['bounds'][crd][1])
        for prim in range(len(den_kwords['coords'][crd])):
            indx = max_prim*crd + prim
            coord_list[indx] = int(valid_coord.index(den_kwords['coords'][crd][prim])+1)
            cf_list[indx]    = float(den_kwords['coefs'][crd][prim])
        for atm in range(len(den_kwords['atoms'][crd])):
            indx = max_atoms*crd + atm
            atm_list[indx]   = int(den_kwords['atoms'][crd][atm])

    lib_den.init_density(
           ctypes.byref(convert_ctypes(random_seed, dtype='int32')), 
           ctypes.byref(convert_ctypes(n_wfn,       dtype='int32')),
           ctypes.byref(convert_ctypes(n_intl,      dtype='int32')),
           ctypes.byref(convert_ctypes(state_list,  dtype='int32')),
           ctypes.byref(convert_ctypes(coord_list,  dtype='int32')),
           ctypes.byref(convert_ctypes(cf_list,     dtype='double')),
           ctypes.byref(convert_ctypes(atm_list,    dtype='int32')),
           ctypes.byref(convert_ctypes(op_list,     dtype='int32')),
           ctypes.byref(convert_ctypes(bnds,        dtype='double')),
           ctypes.byref(convert_ctypes(npts,        dtype='int32')))

    # start processing trajectory data by looping over wavefunction
    # objects and add each trajectory to the dll
    t_max  = 0.
    batch  = 0
    dsets  = ['states',       'phase', 'potential','geom',
              'momentum','derivative', 'coupling', 'amp']
    wfn_keys = [key_val for key_val in chkpt.keys() 
                                    if 'wavefunction' in key_val]

    for wfn_grp in wfn_keys: 
        batch = batch + 1
        traj_keys = [key_val for key_val in chkpt[wfn_grp].keys()
                                    if checkpoint.isTrajectory(key_val)]
        for traj_grp in traj_keys:
            data = [None] * len(dsets)
            for iset in range(len(dsets)):
                dset = wfn_grp+"/"+traj_grp+"/"+dsets[iset]
                t, datum = checkpoint.retrieve_dataset(chkpt, dset, 
                                                         t_init, t_final)
                data[iset] = datum

            t_max   = max(t_max, np.amax(t))
            state   = int(data[0][0][1])
            nt      = len(t)
            ns      = len(data[1][0])
            nd      = len(glbl.properties['crd_widths'])
            data[0] = t

            args = [ctypes.byref(convert_ctypes(batch, dtype='int64')),
                    ctypes.byref(convert_ctypes(nt,    dtype='int64')),
                    ctypes.byref(convert_ctypes(state, dtype='int64')),
                    convert_ctypes(widths,             dtype='double'),
                    convert_ctypes(masses,             dtype='double')]
            # because we're loading by timestep, data in row-major form. 
            # When we flatten, want to do so to transpose. This is done 
            # in one step by flattening to 'row-major' C form (rather 
            # than transposing, then "F" form).
            args  += [convert_ctypes(data[i].flatten('C'),
                             dtype='double') for i in range(len(data)-1)]
            # add amps separately
            ampr  = convert_ctypes(data[len(data)-1][:,0], dtype='double') 
            ampi  = convert_ctypes(data[len(data)-1][:,1], dtype='double')
            args  += [ampr, ampi] 
            lib_den.add_trajectory(*args)

    # FINALLY -- close the checkpoint file
    chkpt.close()

    # evaluate density at each requested time
    n_grid      = int(np.prod(npts))
    convergence = convert_ctypes(0., dtype='double')
    norm_on     = convert_ctypes(0., dtype='double')
    norm_off    = convert_ctypes(0., dtype='double')
    int_grid    = convert_ctypes(np.zeros(n_grid, dtype=float), dtype='double')
    out_nd_grid = np.zeros(npts, dtype=float)

    # if n_intl == 1, plot density vs. time
    if n_intl == 1:
        nt        = math.floor( (t_final - t_init)/t_step ) + 1
        wid       = math.floor( (bnds[1] - bnds[0]) / (npts[0]-1) )
        x_axis    = np.array([t_init +  i*t_step for i in range(nt)], dtype=float)
        y_axis    = np.array([bnds[0] + i*wid for i in range(npts[0])], dtype=float)
        plot_grid = np.zeros((nt, npts[0]), dtype=float)
    # if n_intl == 2, plot coupled density plot for each time step
    if n_intl == 2:
        widx      = math.floor( (bnds[1] - bnds[0]) / (npts[0]-1) )
        widy      = math.floor( (bnds[3] - bnds[2]) / (npts[1]-1) )
        x_axis    = np.array([bnds[0] + i*widx for i in range(npts[0])], dtype=float)
        y_axis    = np.array([bnds[2] + i*widy for i in range(npts[1])], dtype=float)
        plot_grid = np.zeros((npts[0],npts[1]), dtype=float)

    # main loop over the time steps
    den_report = open('nomad_density.out', 'w')
    out_str    = ("time: {:10.4f}, wfn norm on grid:  {:10.4f}, "+
                 "wfn norm off grid: {:10.4f}, convergence: {:10.7f}\n")
    for time in np.arange(t_init, t_final+0.5*t_step, t_step): 

        lib_den.evaluate_density(
                ctypes.byref(convert_ctypes(time,   dtype='double')),
                ctypes.byref(convert_ctypes(n_grid, dtype='int32')),
                int_grid,
                ctypes.byref(convergence),
                ctypes.byref(norm_on),
                ctypes.byref(norm_off))

        den_report.write(out_str.format(time, 
                          float(norm_on.value), 
                          float(norm_off.value), 
                          float(convergence.value)))

        out_nd_grid = np.reshape(np.array(int_grid, dtype=float), tuple(npts))
        if n_intl == 1:
            t_indx  =  int(round( (time - t_init)/t_step ))
            plot_grid[t_indx, :] = out_nd_grid        
        if n_intl == 2:
            plot_grid = out_nd_grid
            plot.heatmap(x_axis, y_axis, plot_grid)
        if n_intl > 2 or print_density_files:
            print_nd_array('nomad_den.t'+str(time), bnds, npts, out_nd_grid)

    den_report.close()

    if n_intl == 1:
        x_axis        *= time_conv
        den_plot, axis = plot.heatmap(x_axis, y_axis, plot_grid.T, 
                                 xlabel='time (fs)',ylabel='coord')
        plot.save('density.png', figure=den_plot)

    return

# parse the input file
def parse_input(input_file):
    """parse an density file"""

    den_kwords = {'tinit'    :0,    'tfinal'   :0, 'tstep'   :10,
                  'states'   :[0],  'coords'   :[[]],
                  'atoms'    :[[]], 'coefs'    :[[]],
                  'normalize':False,'bounds'   :[[]],
                  'npts'     :[],    'op'       :[]}

    #with open(glbl.paths['home_path'] + fname, 'r') as infile:
    with open(input_file, 'r') as infile:
        den_input = infile.readlines()
    
    for line in den_input:
        for kword in den_kwords.keys():
            if kword in line and '=' in line:
                den_kwords[kword] = ast.literal_eval(line[line.index('=')+1:].strip())  

    return den_kwords

# print a n-column n-D array to file
def print_nd_array(file_name, bounds, npts, grid_values):
    """print an nD-array to file"""
    nd = len(npts)-1  
    bin_wid = [(bounds[2*i+1] - bounds[2*i])/npts[i] for i in range(len(npts))]

    with open(file_name, 'w') as den_file:
        counter     = np.zeros(len(npts), dtype=int)
        counter[nd] = -1
        while sum(counter) < sum(npts-1):
            indx = nd
            while counter[indx] == (npts[indx]-1):
                counter[indx] = 0
                indx         -= 1
            counter[indx] += 1
            
            row_str  = ['{:10.6f}'.format(bounds[2*i] + counter[i]*bin_wid[i])
                                   for i in range(len(npts))]
            row_str += ['{:10.4f}'.format(grid_values[tuple(counter)])]
            den_file.write(' '.join(row_str)+"\n")        

#
def convert_ctypes(py_val, dtype=None):
    """convert a python array into a C-data type"""

    # note: the current approach is used based on:
    # https://bugs.python.org/issue27926
    # Namely, the default Python constructor is _very_ slow.
    # if that changes, then this function can change too...

    # there are fancier ways to do this by querying both the array and
    # machine environment, but this will do for now
    if dtype == 'int32':
        type_sym = 'i';i_size = 4; ctype_sym = ctypes.c_int32
    elif dtype == 'int64':
        type_sym = 'i';i_size = 8; ctype_sym = ctypes.c_int64
    elif dtype == 'double':
        type_sym = 'd';i_size = 8; ctype_sym = ctypes.c_double
    elif dtype == 'logical':
        type_sym = 'i';i_size = 4; ctype_sym = ctypes.c_bool
    else:
        sys.exit('convert_ctypes does not recognize dtype='+str(dtype))

    if isinstance(py_val, (float, int)):
        return ctype_sym(py_val)

    c_arr = (ctype_sym * py_val.size)(*py_val) 

    return c_arr
 
#   
if __name__ == '__main__':
    # parse command line arguments
    if '-openmp' in sys.argv:
        glbl.mpi['parallel'] = True

    # initialize
    init()

    # run the main routine
    main()

