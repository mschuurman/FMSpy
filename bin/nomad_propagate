#!/usr/bin/env python
"""
This is the driver for the hamiltonian propagation. This driver
reads the checkpoint file, passes the trajectory data (in batches,
if need be) to the Hamiltonian propagation routines, which
are written as dynamically loaded libraries
"""
import os
import sys as sys
import h5py as h5py
import ctypes as ctypes
import array as array
import numpy as np
import nomad.core.glbl as glbl
import nomad.core.wavefunction as wavefunction
import nomad.core.trajectory as trajectory
import nomad.core.surface as surface
import nomad.core.checkpoint as checkpoint


global chkpt_file, prop_class, amp_archive, ti, tf

def init():
    """Initializes the nomad inputs.

    This must be separate from main so that an error which occurs
    before the input file is created will be written to stdout.
    """

    process_arguments(sys.argv)

def process_arguments(args):
    """Process command line arguments."""
    global chkpt_file, prop_class, amp_archive, ti, tf

    glbl.paths['cwd']        = os.getcwd()
    glbl.paths['chkpt_file'] = args[1]
    chkpt_file               = args[1]

    if '-o' in sys.argv:
        amp_archive = str(args[args.index('-o')+1])
    else:
        amp_archive = 'amp_archive.hdf5'

    if '-ti' in sys.argv:
        ti = float(args[args.index('-ti')+1])
    else:
        ti = float(0.)

    if '-tf' in sys.argv:
        tf = float(args[args.index('-tf')+1])
    else:
        tf = None 

    if '-ansatz' in sys.argv:
        prop_class = args[args.index('-ansatz')+1]
    else:
        prop_class = 'fms' 
 
    return

#
def main():
    """ main driver routine """
    global chkpt_file, prop_class, amp_archive, ti, tf

#    prop_classes = ['fms','mce','mca','ehrenfest']
    prop_classes = ['fms']

    if prop_class not in prop_classes:
        os.exit('prop_class='+prop_class+' is not a valid Hamiltonian type')

    # load the appropriate library
    prop_path = os.environ['NOMAD']+'/nomad/post/'+prop_class+'.so'
    ld_libs   = os.environ['LD_LIBRARY_PATH']
    if not os.path.isfile(prop_path):
        raise FileNotFoundError('Hamiltonian library not found: '+prop_path)
    libprop = ctypes.cdll.LoadLibrary(prop_path)

    # reset chkpt_file variable to be consistent with the current path
    chkpt = h5py.File(chkpt_file, 'r+', libver='latest')
    checkpoint.write_keyword(chkpt,
                             'keywords_paths',
                             'chkpt_file',
                              chkpt_file)
    checkpoint.read_keywords(chkpt)

    # extract information about the basis
    n_wfn, n_traj, n_steps, t_times = checkpoint.retrieve_basis(chkpt)
    n_total  = sum(n_traj)
    n_states = int(glbl.properties['n_states'])
    n_crd    = len(glbl.properties['crd_widths'])
    widths   = np.array(glbl.properties['crd_widths'], dtype=float)
    masses   = np.array(glbl.properties['crd_masses'], dtype=float)
    x_ref    = np.array(glbl.properties['init_coords'][0,0],dtype=float)
    p_ref    = np.array(glbl.properties['init_coords'][0,1],dtype=float)

    # initialize the trajectory table
    libprop.init_trajectories(
         ctypes.byref(convert_ctypes(n_wfn,   dtype='int64')),
         ctypes.byref(convert_ctypes(n_total, dtype='int64')),
         ctypes.byref(convert_ctypes(n_states,dtype='int64')),
         ctypes.byref(convert_ctypes(n_crd,   dtype='int64')),
         ctypes.byref(convert_ctypes(widths,  dtype='double')),
         ctypes.byref(convert_ctypes(masses,  dtype='double')),
         ctypes.byref(convert_ctypes(x_ref,   dtype='double')),
         ctypes.byref(convert_ctypes(p_ref,   dtype='double')))

    # pass the various run time options to the propagation library
    t_step      = float(glbl.properties['default_time_step'])
    full_basis  = True
    init_method = 2
    int_method  = 2
    int_order   = 1
    libprop.set_parameters(
         ctypes.byref(convert_ctypes(t_step,      dtype='double')),
         ctypes.byref(convert_ctypes(full_basis,  dtype='logical')),
         ctypes.byref(convert_ctypes(init_method, dtype='int64')),
         ctypes.byref(convert_ctypes(int_method,  dtype='int64')),
         ctypes.byref(convert_ctypes(int_order,   dtype='int64')))

    # start processing trajectory data by looping over wavefunction
    # objects and add each trajectory to the dll
    t_max  = 0.
    batch  = 0
    dsets  = ['states','phase','potential','geom','momentum','derivative']
    wfn_keys = [key_val for key_val in chkpt.keys() 
                                    if 'wavefunction' in key_val]

    for wfn_grp in wfn_keys: 
        batch = batch + 1
        traj_keys = [key_val for key_val in chkpt[wfn_grp].keys()
                                    if checkpoint.isTrajectory(key_val)]
        for traj_grp in traj_keys:
            data = [None] * len(dsets)
            for iset in range(len(dsets)):
                dset = wfn_grp+"/"+traj_grp+"/"+dsets[iset]
                t, datum = checkpoint.retrieve_dataset(chkpt,dset,ti,tf)
                data[iset] = datum

            t_max   = max(t_max, np.amax(t))
            state   = int(data[0][0][1])
            nt      = len(t)
            ns      = len(data[1][0])
            nd      = len(glbl.properties['crd_widths'])
            data[0] = t
            args = [ctypes.byref(convert_ctypes(batch, dtype='int64')), 
                    ctypes.byref(convert_ctypes(nt, dtype='int64')),
                    ctypes.byref(convert_ctypes(state, dtype='int64')),
                    convert_ctypes(widths,dtype='double'),
                    convert_ctypes(masses,dtype='double')]
            # because we're loading by timestep, data in row-major form. 
            # When we flatten, want to do so to transpose. This is done 
            # in one step by flattening to 'row-major' C form (rather 
            # than transposing, then "F" form).
            args  += [convert_ctypes(data[i].flatten('C'),                        
                             dtype='double') for i in range(len(data))]
            libprop.add_trajectory(*args)
    chkpt.close()
 
    # after data is loaded, this is all on the propagation routines
    tend = tf
    if tend is None:
        tend = t_max
    libprop.propagate(
                    ctypes.byref(convert_ctypes(ti, dtype='double')),
                    ctypes.byref(convert_ctypes(tend, dtype='double')))

    # once propagation is done, retrieve times, phase-space points and 
    # amplitudes from libprop
    glbl.paths['chkpt_file'] = amp_archive

    # this is temporary: only two options, fully coherent or fully incoherent
    # in the future: should be able to specify arbitrary groupings of initial
    # conditions
    if full_basis:
        nbatch = 1
    else:
        nbatch = n_wfn

    time    = convert_ctypes(0., dtype='double')
    n_traj  = convert_ctypes(0,  dtype='int32') 
    indices = convert_ctypes(np.zeros(n_total, dtype=int), dtype='int32')
    for ibatch in range(nbatch):
        if full_basis:
            ibat = convert_ctypes(-1, dtype='int32')
        else:
            ibat = convert_ctypes(ibatch, dtype='int32')


        libprop.next_timestep_info(ctypes.byref(convert_ctypes(True, dtype='logical')),
                                   ctypes.byref(ibat), 
                                   ctypes.byref(time),
                                   ctypes.byref(n_traj),
                                   indices)
        nt = n_traj.value
        print("time="+str(time.value)+" n_traj="+str(nt))
        print("np.array(indices)="+str(np.array(indices[:nt])))

        while nt != 0:
 
            indx_lst  = convert_ctypes(np.array(indices[:nt], dtype=int), dtype='int32')
            state_lst = convert_ctypes(np.zeros(nt, dtype=int), dtype='int32')
            amp_r     = convert_ctypes(np.zeros(nt, dtype=float), dtype='double')
            amp_i     = convert_ctypes(np.zeros(nt, dtype=float), dtype='double')
            ener_lst  = convert_ctypes(np.zeros(n_states*nt, dtype=float), dtype='double')
            x_lst     = convert_ctypes(np.zeros(n_crd*nt, dtype=float), dtype='double')
            p_lst     = convert_ctypes(np.zeros(n_crd*nt, dtype=float), dtype='double')
            deriv_lst = convert_ctypes(np.zeros(n_crd*n_states*n_states*nt, dtype=float), dtype='double')
            libprop.retrieve_timestep(ctypes.byref(ibat),
                                      ctypes.byref(n_traj),
                                      indx_lst,  
                                      state_lst, 
                                      amp_r, 
                                      amp_i, 
                                      ener_lst, 
                                      x_lst, 
                                      p_lst, 
                                      deriv_lst)

            # build up the wavefunction object
            wfn      = wavefunction.Wavefunction()
            wfn.time = time.value

            for itraj in range(nt):
                
                new_surf = surface.Surface()
                new_traj = trajectory.Trajectory(n_states, n_crd, 
                                                 width=widths, 
                                                 mass=masses,
                                                 label=indx_lst[itraj],
                                                 kecoef=0.5/masses)

                new_traj.update_x(np.array(x_lst[n_crd*itraj:n_crd*(itraj+1)]))
                new_traj.update_p(np.array(p_lst[n_crd*itraj:n_crd*(itraj+1)]))
                new_traj.update_amplitude(complex(float(amp_r[itraj]),float(amp_i[itraj])))

                new_surf.add_data('geom', new_traj.x())
                new_surf.add_data('potential', np.array(ener_lst[n_states*itraj:n_states*(itraj+1)]) + 
                                               glbl.properties['pot_shift'])

                dlen = n_crd * n_states * n_states
                deriv = np.reshape(np.array(deriv_lst[dlen*itraj:dlen*(itraj+1)]), 
                                            tuple([n_crd, n_states, n_states]))
                new_surf.add_data('derivative', deriv)
                new_traj.update_pes_info(new_surf)

                wfn.add_trajectory(new_traj, relabel=False)

            # throw this timestep to the new checkpoint file
            checkpoint.archive_simulation(wfn, None)
          
            # advance to the next time step
            libprop.next_timestep_info(ctypes.byref(convert_ctypes(False, dtype='logical')),
                                   ctypes.byref(ibat),
                                   ctypes.byref(time),
                                   ctypes.byref(n_traj),
                                   indices)
            nt = n_traj.value

    return

#
def convert_ctypes(py_val, dtype=None):
    """convert a python array into a C-data type"""

    # note: the current approach is used based on:
    # https://bugs.python.org/issue27926
    # Namely, the default Python constructor is _very_ slow.
    # if that changes, then this function can change too...

    # there are fancier ways to do this by querying both the array and
    # machine environment, but this will do for now
    if dtype == 'int32':
        type_sym = 'i';i_size = 4; ctype_sym = ctypes.c_int32
    elif dtype == 'int64':
        type_sym = 'i';i_size = 8; ctype_sym = ctypes.c_int64
    elif dtype == 'double':
        type_sym = 'd';i_size = 8; ctype_sym = ctypes.c_double
    elif dtype == 'logical':
        type_sym = 'i';i_size = 4; ctype_sym = ctypes.c_bool
    else:
        sys.exit('convert_ctypes does not recognize dtype='+str(dtype))

    if isinstance(py_val, (float, int)):
        return ctype_sym(py_val)

    c_arr = (ctype_sym * py_val.size)(*py_val) 

    return c_arr
 
#   
if __name__ == '__main__':
    # parse command line arguments
    if '-openmp' in sys.argv:
        glbl.mpi['parallel'] = True

    # initialize
    init()

    # run the main routine
    main()

